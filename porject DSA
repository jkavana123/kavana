public class NumberProperties {

    public static void main(String[] args) {
        int[] numbers = {2, 3, 4, 5, 6, 10, 11, 121, 153, 28, 496, 1001, 12321};

        System.out.println("Prime Numbers:");
        for (int num : numbers) {
            if (isPrime(num)) {
                System.out.println(num);
            }
        }

        System.out.println("\nEven Numbers:");
        for (int num : numbers) {
            if (isEven(num)) {
                System.out.println(num);
            }
        }

        System.out.println("\nOdd Numbers:");
        for (int num : numbers) {
            if (isOdd(num)) {
                System.out.println(num);
            }
        }

        System.out.println("\nPalindrome Numbers:");
        for (int num : numbers) {
            if (isPalindrome(num)) {
                System.out.println(num);
            }
        }

        System.out.println("\nPerfect Numbers:");
        for (int num : numbers) {
            if (isPerfect(num)) {
                System.out.println(num);
            }
        }

        System.out.println("\nArmstrong Numbers:");
        for (int num : numbers) {
            if (isArmstrong(num)) {
                System.out.println(num);
            }
        }

        System.out.println("\nFibonacci Numbers:");
        for (int num : numbers) {
            if (isFibonacci(num)) {
                System.out.println(num);
            }
        }
    }

    // Check if a number is prime
    public static boolean isPrime(int num) {
        if (num <= 1) return false;
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

    // Check if a number is even
    public static boolean isEven(int num) {
        return num % 2 == 0;
    }

    // Check if a number is odd
    public static boolean isOdd(int num) {
        return num % 2 != 0;
    }

    // Check if a number is a palindrome
    public static boolean isPalindrome(int num) {
        int originalNum = num;
        int reversedNum = 0;
        while (num != 0) {
            reversedNum = reversedNum * 10 + num % 10;
            num /= 10;
        }
        return originalNum == reversedNum;
    }

    // Check if a number is perfect
    public static boolean isPerfect(int num) {
        if (num <= 1) return false;
        int sum = 0;
        for (int i = 1; i <= num / 2; i++) {
            if (num % i == 0) {
                sum += i;
            }
        }
        return sum == num;
    }

    // Check if a number is an Armstrong number (Narcissistic number)
    public static boolean isArmstrong(int num) {
        int originalNum = num;
        int sum = 0;
        int digits = (int) Math.log10(num) + 1;
        while (num != 0) {
            int digit = num % 10;
            sum += Math.pow(digit, digits);
            num /= 10;
        }
        return sum == originalNum;
    }

    // Check if a number is a Fibonacci number
    public static boolean isFibonacci(int num) {
        return isPerfectSquare(5 * num * num + 4) || isPerfectSquare(5 * num * num - 4);
    }

    // Helper function to check if a number is a perfect square
    public static boolean isPerfectSquare(int num) {
        int sqrt = (int) Math.sqrt(num);
        return sqrt * sqrt == num;
    }

    // Check if a number is a Harshad number (divisible by the sum of its digits)
    public static boolean isHarshad(int num) {
        int sumOfDigits = 0, originalNum = num;
        while (num != 0) {
            sumOfDigits += num % 10;
            num /= 10;
        }
        return originalNum % sumOfDigits == 0;
    }

    // Check if a number is a Strong number
    public static boolean isStrong(int num) {
        int originalNum = num, sum = 0;
        while (num != 0) {
            int digit = num % 10;
            sum += factorial(digit);
            num /= 10;
        }
        return sum == originalNum;
    }

    // Helper function to calculate factorial
    public static int factorial(int num) {
        int fact = 1;
        for (int i = 1; i <= num; i++) {
            fact *= i;
        }
        return fact;
    }

    // Check if a number is a Triangular number
    public static boolean isTriangular(int num) {
        int x = (int) Math.sqrt(2 * num);
        return x * (x + 1) / 2 == num;
    }

    // Check if a number is a Decagonal number
    public static boolean isDecagonal(int num) {
        int x = (int) Math.sqrt(2 * num);
        return x * (3 * x - 1) / 2 == num;
    }

    // Check if a number is a Palindromic square number
    public static boolean isPalindromicSquare(int num) {
        int square = num * num;
        return isPalindrome(square);
    }

    // Check if a number is a Kaprekar number
    public static boolean isKaprekar(int num) {
        int square = num * num;
        int numDigits = (int) Math.log10(num) + 1;
        int rightPart = square % (int) Math.pow(10, numDigits);
        int leftPart = square / (int) Math.pow(10, numDigits);
        return leftPart + rightPart == num;
    }

    // Check if a number is a Smith number (composite number whose sum of digits equals sum of digits of its prime factors)
    public static boolean isSmith(int num) {
        if (num < 2) return false;
        int digitSum = sumOfDigits(num);
        int primeFactorSum = sumOfPrimeFactorDigits(num);
        return digitSum == primeFactorSum;
    }

    // Helper function to sum digits of a number
    public static int sumOfDigits(int num) {
        int sum = 0;
        while (num != 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }

    // Helper function to sum digits of prime factors
    public static int sumOfPrimeFactorDigits(int num) {
        int sum = 0;
        for (int i = 2; i <= num; i++) {
            while (num % i == 0) {
                sum += sumOfDigits(i);
                num /= i;
            }
        }
        return sum;
    }
}
public class NumberProperties {
    public static void main(String[] args) {
        int[] numbers = { 11, 16, 153, 8, 21, 121, 4, 8, 5, 0 };
        
        for (int num : numbers) {
            System.out.println("Number: " + num);
            System.out.println("Prime: " + isPrime(num));
            System.out.println("Perfect Square: " + isPerfectSquare(num));
            System.out.println("Fibonacci: " + isFibonacci(num));
            System.out.println("Armstrong: " + isArmstrong(num, num, 0));
            System.out.println("Palindrome: " + isPalindrome(num, 0));
            System.out.println();
        }
    }

    // Prime number check using bit manipulation
    public static boolean isPrime(int n) {
        if (n <= 1) return false;
        if (n == 2) return true;  // 2 is prime
        if ((n & 1) == 0) return false;  // even numbers are not prime
        for (int i = 3; i * i <= n; i += 2) {  // check odd numbers only
            if ((n % i) == 0) return false;
        }
        return true;
    }

    // Perfect Square check using bit manipulation
    public static boolean isPerfectSquare(int n) {
        if (n < 0) return false;  // Negative numbers can't be perfect squares
        int x = n;
        while ((x * x) > n) {
            x = (x + n / x) / 2;  // Newton's method for approximation
        }
        return (x * x == n);
    }

    // Fibonacci number check using bit manipulation
    public static boolean isFibonacci(int n) {
        if (n < 0) return false;
        // A number is a Fibonacci number if and only if one or both of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square
        return isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4);
    }

    // Armstrong number check using bit manipulation and recursion
    public static boolean isArmstrong(int n, int original, int sum) {
        if (n == 0) return sum == original;
        int digit = n & 15;  // Get the last 4 bits (the last digit in base 10)
        sum += Math.pow(digit, String.valueOf(original).length());
        return isArmstrong(n >> 4, original, sum);  // Right shift by 4 (since we're working with base 10 digits)
    }

    // Palindrome check using bit manipulation
    public static boolean isPalindrome(int n, int reversed) {
        if (n == 0) return n == reversed;
        reversed = (reversed << 1) | (n & 1);  // Shift left and add the last bit of n
        return isPalindrome(n >> 1, reversed);  // Right shift n by 1
    }
}
public class NumberProperties {
    public static void main(String[] args) {
        int[] numbers = { 11, 16, 153, 8, 21, 121, 4, 8, 5, 0 };
        
        for (int num : numbers) {
            System.out.println("Number: " + num);
            System.out.println("Prime: " + isPrime(num));
            System.out.println("Perfect Square: " + isPerfectSquare(num));
            System.out.println("Fibonacci: " + isFibonacci(num));
            System.out.println("Armstrong: " + isArmstrong(num));
            System.out.println("Palindrome: " + isPalindrome(num));
            System.out.println();
        }
    }

    // Prime number check using the square root method
    public static boolean isPrime(int n) {
        if (n <= 1) return false;
        if (n == 2) return true; // 2 is prime
        if (n % 2 == 0) return false; // Even numbers greater than 2 are not prime
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;
    }

    // Perfect Square check
    public static boolean isPerfectSquare(int n) {
        if (n < 0) return false;
        int sqrt = (int) Math.sqrt(n);
        return sqrt * sqrt == n; // Check if the square of sqrt equals the original number
    }

    // Fibonacci number check using the formula
    public static boolean isFibonacci(int n) {
        if (n < 0) return false;
        return isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4);
    }

    // Armstrong number check (Narcissistic number check)
    public static boolean isArmstrong(int n) {
        int temp = n, sum = 0, digits = 0;
        while (temp > 0) {
            temp /= 10;
            digits++;
        }
        temp = n;
        while (temp > 0) {
            int digit = temp % 10;
            sum += Math.pow(digit, digits);
            temp /= 10;
        }
        return sum == n;
    }

    // Palindrome check
    public static boolean isPalindrome(int n) {
        if (n < 0) return false; // Negative numbers are not palindromes
        int original = n, reversed = 0;
        while (n > 0) {
            reversed = reversed * 10 + n % 10;
            n /= 10;
        }
        return original == reversed; // Compare the original number with the reversed number
    }
}
public class NumberProperties {
    public static void main(String[] args) {
        int[] numbers = { 11, 16, 153, 8, 21, 121, 4, 8, 5, 0 };
        
        for (int num : numbers) {
            System.out.println("Number: " + num);
            System.out.println("Prime: " + isPrime(num, 2));
            System.out.println("Perfect Square: " + isPerfectSquare(num, 0));
            System.out.println("Fibonacci: " + isFibonacci(num));
            System.out.println("Armstrong: " + isArmstrong(num, num, 0));
            System.out.println("Palindrome: " + isPalindrome(num, 0));
            System.out.println();
        }
    }

    // Prime number check using recursion
    public static boolean isPrime(int n, int divisor) {
        if (n <= 1) return false;
        if (divisor * divisor > n) return true;
        if (n % divisor == 0) return false;
        return isPrime(n, divisor + 1);
    }

    // Perfect Square check using recursion
    public static boolean isPerfectSquare(int n, int i) {
        if (i * i > n) return false;
        if (i * i == n) return true;
        return isPerfectSquare(n, i + 1);
    }

    // Fibonacci number check using recursion (check 5*n^2+4 or 5*n^2-4
    public static boolean isFibonacci(int n) {
        return isPerfectSquare(5 * n * n + 4, 0) || isPerfectSquare(5 * n * n - 4, 0);
    }

    // Armstrong number check using recursion
    public static boolean isArmstrong(int n, int original, int sum) {
        if (n == 0) return sum == original;
        int digit = n % 10;
        sum += Math.pow(digit, String.valueOf(original).length());
        return isArmstrong(n / 10, original, sum);
    }

    // Palindrome check using recursion
    public static boolean isPalindrome(int n, int reversed) {
        if (n == 0) return n == reversed;
        reversed = reversed * 10 + n % 10;
        return isPalindrome(n / 10, reversed);
    }
}
public class NumberProperties {

    public static void main(String[] args) {
        int[] numbers = {2, 3, 4, 5, 6, 10, 11, 121, 153, 28, 496, 1001, 12321};

        System.out.println("Prime Numbers:");
        for (int num : numbers) {
            boolean isPrime = true;
            if (num <= 1) isPrime = false;
            for (int i = 2; i <= Math.sqrt(num); i++) {
                if (num % i == 0) {
                    isPrime = false;
                    break;
                }
            }
            if (isPrime) System.out.println(num);
        }

        System.out.println("\nEven Numbers:");
        for (int num : numbers) {
            if (num % 2 == 0) {
                System.out.println(num);
            }
        }

        System.out.println("\nOdd Numbers:");
        for (int num : numbers) {
            if (num % 2 != 0) {
                System.out.println(num);
            }
        }

        System.out.println("\nPalindrome Numbers:");
        for (int num : numbers) {
            int originalNum = num;
            int reversedNum = 0;
            while (num != 0) {
                reversedNum = reversedNum * 10 + num % 10;
                num /= 10;
            }
            if (originalNum == reversedNum) {
                System.out.println(originalNum);
            }
        }

        System.out.println("\nPerfect Numbers:");
        for (int num : numbers) {
            if (num <= 1) continue;
            int sum = 0;
            for (int i = 1; i <= num / 2; i++) {
                if (num % i == 0) {
                    sum += i;
                }
            }
            if (sum == num) {
                System.out.println(num);
            }
        }

        System.out.println("\nArmstrong Numbers:");
        for (int num : numbers) {
            int originalNum = num;
            int sum = 0;
            int digits = (int) Math.log10(num) + 1;
            while (num != 0) {
                int digit = num % 10;
                sum += Math.pow(digit, digits);
                num /= 10;
            }
            if (sum == originalNum) {
                System.out.println(originalNum);
            }
        }

        System.out.println("\nFibonacci Numbers:");
        for (int num : numbers) {
            int x1 = 5 * num * num + 4;
            int x2 = 5 * num * num - 4;
            int sqrt1 = (int) Math.sqrt(x1);
            int sqrt2 = (int) Math.sqrt(x2);
            if (sqrt1 * sqrt1 == x1 || sqrt2 * sqrt2 == x2) {
                System.out.println(num);
            }
        }

        System.out.println("\nHarshad Numbers:");
        for (int num : numbers) {
            int sumOfDigits = 0, originalNum = num;
            while (num != 0) {
                sumOfDigits += num % 10;
                num /= 10;
            }
            if (originalNum % sumOfDigits == 0) {
                System.out.println(originalNum);
            }
        }

        System.out.println("\nStrong Numbers:");
        for (int num : numbers) {
            int originalNum = num, sum = 0;
            while (num != 0) {
                int digit = num % 10;
                int fact = 1;
                for (int i = 1; i <= digit; i++) {
                    fact *= i;
                }
                sum += fact;
                num /= 10;
            }
            if (sum == originalNum) {
                System.out.println(originalNum);
            }
        }

        System.out.println("\nTriangular Numbers:");
        for (int num : numbers) {
            int x = (int) Math.sqrt(2 * num);
            if (x * (x + 1) / 2 == num) {
                System.out.println(num);
            }
        }

        System.out.println("\nDecagonal Numbers:");
        for (int num : numbers) {
            int x = (int) Math.sqrt(2 * num);
            if (x * (3 * x - 1) / 2 == num) {
                System.out.println(num);
            }
        }

        System.out.println("\nKaprekar Numbers:");
        for (int num : numbers) {
            int square = num * num;
            int numDigits = (int) Math.log10(num) + 1;
            int rightPart = square % (int) Math.pow(10, numDigits);
            int leftPart = square / (int) Math.pow(10, numDigits);
            if (leftPart + rightPart == num) {
                System.out.println(num);
            }
        }

        System.out.println("\nSmith Numbers:");
        for (int num : numbers) {
            if (num < 2) continue;
            int digitSum = 0, originalNum = num;
            while (num != 0) {
                digitSum += num % 10;
                num /= 10;
            }
            int primeFactorSum = 0;
            for (int i = 2; i <= originalNum; i++) {
                while (originalNum % i == 0) {
                    int factorSum = 0;
                    int factor = i;
                    while (factor != 0) {
                        factorSum += factor % 10;
                        factor /= 10;
                    }
                    primeFactorSum += factorSum;
                    originalNum /= i;
                }
            }
            if (digitSum == primeFactorSum) {
                System.out.println(originalNum);
            }
        }
    }
}
import java.util.*;

public class ComprehensiveNumberChecker {
    public static void main(String[] args) {
        int[] numbers = {1, 4, 11, 16, 21, 121, 153, 6, 28, 9474, 1634, 703, 145, 123, 19, 44};

        for (int num : numbers) {
            System.out.println("Number: " + num);
            System.out.println("Even: " + isEven(num));
            System.out.println("Odd: " + isOdd(num));
            System.out.println("Prime (Math): " + isPrimeMath(num));
            System.out.println("Prime (Bit Manip): " + isPrimeBitManip(num));
            System.out.println("Perfect Number: " + isPerfectNumber(num));
            System.out.println("Deficient Number: " + isDeficientNumber(num));
            System.out.println("Abundant Number: " + isAbundantNumber(num));
            System.out.println("Perfect Square (Math): " + isPerfectSquareMath(num));
            System.out.println("Perfect Square (Bit Manip): " + isPerfectSquareBitManip(num));
            System.out.println("Fibonacci: " + isFibonacci(num));
            System.out.println("Armstrong Number: " + isArmstrong(num));
            System.out.println("Palindrome (Math): " + isPalindromeMath(num));
            System.out.println("Harshad Number: " + isHarshadNumber(num));
            System.out.println("Automorphic Number: " + isAutomorphic(num));
            System.out.println("Kaprekar Number: " + isKaprekar(num));
            System.out.println("Spy Number: " + isSpyNumber(num));
            System.out.println("Duck Number: " + isDuckNumber(num));
            System.out.println("Happy Number: " + isHappyNumber(num));
            System.out.println("Sad Number: " + isSadNumber(num));
            System.out.println("Special Number: " + isSpecialNumber(num));
            System.out.println("Keith Number: " + isKeithNumber(num));
            System.out.println("Circular Prime: " + isCircularPrime(num));
            System.out.println("Smith Number: " + isSmithNumber(num));
            System.out.println("=============================================");
        }
    }

    // Check if number is Even
    public static boolean isEven(int n) {
        return (n & 1) == 0;
    }

    // Check if number is Odd
    public static boolean isOdd(int n) {
        return (n & 1) == 1;
    }

    // Prime check using mathematical logic
    public static boolean isPrimeMath(int n) {
        if (n <= 1) return false;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) return false;
        }
        return true;
    }

    // Prime check using bit manipulation
    public static boolean isPrimeBitManip(int n) {
        if (n <= 1) return false;
        if (n == 2) return true;
        if ((n & 1) == 0) return false;
        for (int i = 3; i * i <= n; i += 2) {
            if (n % i == 0) return false;
        }
        return true;
    }

    // Check if number is a Perfect Number
    public static boolean isPerfectNumber(int n) {
        if (n <= 0) return false;
        int sum = 1;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                sum += i;
                if (i != n / i) sum += n / i;
            }
        }
        return sum == n && n != 1;
    }

    // Check if number is a Deficient Number
    public static boolean isDeficientNumber(int n) {
        if (n <= 0) return false;
        int sum = 1;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                sum += i;
                if (i != n / i) sum += n / i;
            }
        }
        return sum < n;
    }

    // Check if number is an Abundant Number
    public static boolean isAbundantNumber(int n) {
        if (n <= 0) return false;
        int sum = 1;
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                sum += i;
                if (i != n / i) sum += n / i;
            }
        }
        return sum > n;
    }

    // Perfect Square check using mathematical logic
    public static boolean isPerfectSquareMath(int n) {
        if (n < 0) return false;
        int sqrt = (int) Math.sqrt(n);
        return sqrt * sqrt == n;
    }

    // Perfect Square check using bit manipulation
    public static boolean isPerfectSquareBitManip(int n) {
        if (n < 0) return false;
        int x = n;
        while ((x * x) > n) {
            x = (x + n / x) / 2;
        }
        return x * x == n;
    }

    // Fibonacci number check
    public static boolean isFibonacci(int n) {
        if (n < 0) return false;
        return isPerfectSquareMath(5 * n * n + 4) || isPerfectSquareMath(5 * n * n - 4);
    }

    // Armstrong number check
    public static boolean isArmstrong(int n) {
        int sum = 0, temp = n, digits = String.valueOf(n).length();
        while (temp > 0) {
            int digit = temp % 10;
            sum += Math.pow(digit, digits);
            temp /= 10;
        }
        return sum == n;
    }

    // Palindrome check using mathematical approach
    public static boolean isPalindromeMath(int n) {
        int original = n, reversed = 0;
        while (n > 0) {
            reversed = (reversed * 10) + (n % 10);
            n /= 10;
        }
        return original == reversed;
    }

    // Harshad (Niven) Number check
    public static boolean isHarshadNumber(int n) {
        if (n <= 0) return false;
        int sum = 0, temp = n;
        while (temp > 0) {
            sum += temp % 10;
            temp /= 10;
        }
        return n % sum == 0;
    }

    // Automorphic Number check
    public static boolean isAutomorphic(int n) {
        int square = n * n;
        return Integer.toString(square).endsWith(Integer.toString(n));
    }

    // Kaprekar Number check
    public static boolean isKaprekar(int n) {
        if (n == 1) return true;
        int square = n * n;
        String str = String.valueOf(square);
        int len = str.length();
        String left = str.substring(0, len / 2);
        String right = str.substring(len / 2);
        int l = (left.isEmpty()) ? 0 : Integer.parseInt(left);
        int r = Integer.parseInt(right);
        return l + r == n;
    }

    // Spy Number check
    public static boolean isSpyNumber(int n) {
        int sum = 0, prod = 1;
        while (n > 0) {
            int digit = n % 10;
            sum += digit;
            prod *= digit;
            n /= 10;
        }
        return sum == prod;
    }

    // Add checks for:
    // - Happy Numbers
    // - Keith Numbers
    // - Smith Numbers

    // Let me know how you'd like more expansions!
}
